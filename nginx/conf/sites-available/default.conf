map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
}
server {
    listen 80;
    server_name www.mengjian1.com mengjian1.com;
    rewrite ^(.*) https://$host$1 permanent;
}
server {
    listen       443;
    server_name www.mengjian1.com mengjian1.com;
    
    ssl on;
    ssl_certificate   /cert/214138946260835.pem;
    ssl_certificate_key  /cert/214138946260835.key;
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    
    

    #301 redirect if http_host is a main domain(i.e:test.com)
    #abandoned solution of not starting with www: (if ($http_host !~* ^www\.)
    if ($http_host ~* ^[a-zA-Z0-9-_]+\.\w+$) {
        return 301 $scheme://www.$http_host$request_uri;
    }

    location / {
      root /home/czm/webroot/client;      
      try_files $uri @base;
      index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root /home/czm/webroot/client;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}


    ################### 自定义区 ########################
    gzip_static on;
    etag on;
    try_files $uri @base;
    location @base {
      expires     off;
      ssi         on;
      proxy_http_version 1.1;
      proxy_request_buffering off;
      limit_req_status 503;


      proxy_buffer_size          128k;
      proxy_buffers              4 256k;
      proxy_busy_buffers_size    256k;
      #proxy_buffering off;
      

      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $host;
      proxy_set_header Port $server_port;
      proxy_set_header Schema $scheme;
      proxy_set_header X-URL $request_uri;
      # proxy_set_header X-NginX-Proxy true;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;


      proxy_pass http://nodejs;
      proxy_next_upstream error timeout http_502;
      proxy_next_upstream_tries 1;

      proxy_redirect off;
      proxy_intercept_errors off;


      # proxy_cache wware-cache;
      # proxy_cache_methods GET HEAD;
      # proxy_cache_key $http_host$uri$is_args$args;
      # add_header TEST_CACHE "$http_host$uri$is_args$args";
      # proxy_cache_min_uses 1;
      # proxy_cache_valid 200 302 5s;
      # proxy_cache_valid 404 10s;
      # see https://github.com/FRiCKLE/ngx_cache_purge/blob/master/README.md
      # proxy_cache_purge PURGE from 127.0.0.1;
  }
  

  location = / {
    rewrite ^(.*)$ /index.html;
  }

  location ^~ /.bzr {
      return 400;
  }

  location ^~ /.git {
      return 400;
  }

  location ^~ /.hg {
      return 400;
  }

  location ^~ /.svn {
      return 400;
  }

  location ^~ /.cvs {
      return 400;
  }
  # deny access to .htaccess files, if Apache's document root
  # concurs with nginx's one
  #
  location ~ /\.ht {
    return 400;
  }
}

